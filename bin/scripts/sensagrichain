#!/usr/bin/env python
#-*- coding: utf-8 -*-

######################################
#          CESBIO 2017-2019          #
#    Last update: Ludo 06/06/2019    #
#    Creation:    Ludo 18/12/2018    #
######################################

import sys
import os
import glob
import subprocess
import string
import ConfigParser
import json
import numpy as np
import argparse
import Results
import GenerateCommonDates as gcdates
from dates import GetDates,GetDatesSentinel
from time import gmtime, strftime

def cartouche():
    """ Cartouche """
    text1 = """
#############################################
#       SenSAgriChain Classification Chain  #
#       Last version: 25/02/2019            #
#             CESBIO 2017-2019              #
"""

    text2 = """#                                           #
#     Script generated automaticaly on      #
#            %s            #
#  Experienced user can modify it but only  #   
#            at her/his own risk.           #
#############################################

"""%(strftime("%Y-%m-%d %H:%M:%S", gmtime()))

    line = """#############################################"""

    print text1 + line
    return text1 + text2 



def ConfigSection(section):
    """ Parse configuration file """
    dic = {}
    Options = Config.option(section)
    for option in Options:
        try:
            dic[option] = Config.get(section, option)
            if dic[option] == -1:
                DebugPrint("Skip %s"%(option))
        except:
            print("Exception on %s"%(option))
            dic[option] = None
    return dic


def CreateWorkDirectory(workdir):
    """ Chain Flag -w : Create Working directory """
    print "### Creation of the work directory %s ###"%(workdir)
    os.system("mkdir -p %s"%(workdir))
    os.system("mkdir -p %s/WorkFiles/Shapefiles"%(workdir))
    os.system("mkdir -p %s/WorkFiles/Images"%(workdir))
    sensagrihome = os.environ.get('SENSAGRICHAIN_HOME')
    os.system("cp $SENSAGRICHAIN_HOME/bin/scripts/config/template-joborder.cfg %s"%(workdir))
    #os.system("cp $SENSAGRICHAIN_HOME/bin/scripts/config/template-results.cfg %s"%(workdir))
    here = os.getcwd() 

    listvar = {'workdir':workdir,
               'time':"0-01:00:00",
               'pathworkdir': here + "/"+ workdir,
               'S1_Dates':"S1_Dates.txt",
               'S2_Dates':"S2_Dates.txt",
               'Tiles':"""["tiles1","tiles2"]""",
               'S1_Images':"""["S1_Images1.tif","S1_Images2.tif"]""",
               'S2_Images':"""["S2_Images1.tif","S2_Images2.tif"]""",
               'Shapefiles':"""["Shapefile1.shp","Shapefile2.shp"]"""
                }

    with open("%s/template-joborder.cfg"%(workdir), 'r') as content_file:
        content = content_file.read()
        template =  string.Template(content)
        joborderfile = open("%s/joborder.cfg"%(workdir),"w") 
        joborderfile.write(template.substitute(listvar))
        joborderfile.close()
        os.system("rm %s/template-joborder.cfg"%(workdir))
  
    print("Fill the %s/WorkFiles/Images/ and %s/WorkFiles/Shapefiles/ directories with relevant files,"%(workdir,workdir))
    print("""update the "Tiles" parameters in the job order file, then, in the %s directory, run the command:\n"""%(workdir))
    print("\033[0;32msensagrichain -u joborder.cfg")
    print("\033[0m") # Reset color #
    print("to update the joborder file.")



def ManageStatistics(workdir,listvar):
    """ chain Flag -r : Deal with outputing statistics """ 
    os.system("mkdir -p %s/Statistics/"%(workdir))
    os.system("cp $SENSAGRICHAIN_HOME/bin/scripts/config/template-results.cfg %s/Statistics/"%(workdir))

    with open("%s/Statistics/template-results.cfg"%(workdir), 'r') as content_file:
        content = content_file.read()
        template =  string.Template(content)
        joborderfile = open("%s/Statistics/results.cfg"%(workdir),"w") 
        joborderfile.write(template.substitute(listvar))
        joborderfile.close()
        os.system("rm %s/Statistics/template-results.cfg"%(workdir))

def UpdateJoborder(joborder):
    """ Chain Flag -u : Update job order"""
    # TODO: Add update of date indices from the date file
 
    print "*** Updating Joborder %s ***"%(joborder)

    config = ConfigParser.ConfigParser()
    namecfg = config.read(joborder)

    # Get specific variabl form current job order # 
    workdir = json.loads(config.get('Parameters',"WorkingDirectory"))
    TilesList = json.loads(config.get('Parameters',"Tiles"))

    imagesfiles = glob.glob(workdir + "/WorkFiles/Images/*.tif")
    shapefiles  = glob.glob(workdir + "/WorkFiles/Shapefiles/*.shp")

    images = [str(im.split("/")[-1]) for im in imagesfiles]
    shapes = [str(sh.split("/")[-1]) for sh in shapefiles]
	
    newS1images = []
    newS2images = []
    newShapefiles = []

    #if len(shapes) != len(TilesList):
    #	for tile in TilesList:
    #	    newShapefiles.append(shapes[0])
    #else:
    #	newShapefiles = shapes

    for tile in TilesList:
        for im in images:
	    if tile[1:] in im:
		if "s1" in im.lower() or "sentinel1" in im.lower():
		    newS1images.append(im)
         	if "s2" in im.lower() or "sentinel2" in im.lower():
		    newS2images.append(im)
         
	for sh in shapes:
	    if tile[1:] in sh:
		newShapefiles.append(sh)


    if len(newShapefiles) != len(TilesList):
    	for tile in TilesList:
    	    newShapefiles.append(shapes[0])
   
    Qpattern = (len(newS1images) + len(newS2images) + len(newShapefiles) ) > 0

    # Modify input joborder:
    if(Qpattern):
	jo = open(joborder) # Open job order
	jotext = jo.read()  # Store entire joborder in string
	jo.close()

	jo = open(joborder) # Re open joborder
	for line in jo.readlines():
	    l = line.split(":")
	    if(l[0] == "RadarImages"):
		jotext = jotext.replace(l[1],"                    %s\n"%(newS1images))
	    if(l[0] == "OpticalImages"):
		jotext = jotext.replace(l[1],"                  %s\n"%(newS2images))
	    if(l[0] == "Shapefiles"):
		jotext = jotext.replace(l[1],"                     %s\n"%(newShapefiles))
	jo.close()
	# Save updated joborder
	jo = open(joborder,"w")
	jo.write(jotext)
	jo.close()

    else:
	     print("*** Warning ***")
	     print("The names of the files in the WorkFiles directory do not contain enough patters to allow an automatic update of the job order.")
	     print("The job order file has not been updated.")



    quit()

	    
   # sensagrihome = os.environ.get('SENSAGRICHAIN_HOME')
    listvar = {'workdir':workdir,
               'time':"0-01:00:00",
               'pathworkdir':sensagrihome + "/"+ workdir,
               'S1_Dates':"S1_Dates.txt",
               'S2_Dates':"S2_Dates.txt",
               'Tiles':"""["tiles1","tiles2"]""",
               'S1_Images':"""["S1_Images1.tif","S1_Images2.tif"]""",
               'S2_Images':"""["S2_Images1.tif","S2_Images2.tif"]""",
               'Shapefiles':"""["Shapefile1.shp","Shapefile2.shp"]"""
                }

def ExecuteJob(jobfile):
        """ Chain Flag -x: Manage execution with log files """
	timetag = datetime.datetime.now().strftime("%y%m%d-%H%M%S")
        logfile = jobfile[:-3] + "-%s.log"%(timetag) 
	excom = "bash %s > %s 2>&1 &"%(jobfile,logfile)
        try:
		os.system(excom)
                print "The job %s is running"%(jobfile)
	        print "To monitor this job, the following commands can be used:"
	        print "log %s (for standard output)"%(logfile)
	        print "dbg %s (for details output)"%(logfile)
	        print "more %s (for all the output)"%(logfile)
	except:
		print "ERROR: Something went wrong with the job %s"%(jobfile)
		print "       Check if the file exists."

##########################################################################################################################
#                          List of Mapping dictionaires to handle writting in the job script file                        #
##########################################################################################################################

# Header of the SLURM script that is going to be generated accorinding to the joborder setting #
header = string.Template("""#SBATCH --job-name=$name
#SBATCH --nodes=$nodes
#SBATCH --ntasks=$ntasks
#SBATCH --ntasks-per-node=$ntaskspernode
#SBATCH --mem=$mem
#SBATCH --time=$time
#SBATCH --output="$name-%j.out"
#SBATCH --error="$name-%j.err"
#SBATCH --mail-user=$email
#SBATCH --mail-type=$mailtype

# Log function #
printlog () {
  echo LOG $$(date +'%d/%m/%Y-%H:%M:%S'): $$1
}
printdebug () {
  echo DBG $$(date +'%d/%m/%Y-%H:%M:%S'): $$1
}

# Add system options here #
$sysoptions

#dirname=/tmpdir/$$USER/$$SLURM_JOBID
dirname=$workdir
#mkdir -p $$dirname
cd $$dirname
mkdir -p AllTiles 
mkdir -p Reports 
mkdir -p tmp 
mkdir -p Products 
mkdir -p Statistics 
""")

createshapefiles = string.Template("""
printlog "Split Polygons"
mkdir -p $CreationDir
SplitPolygonsArea.py $shapefile $NbRun $CreationDir $WorkFiles $lc $code $crop
""")

copyshapefiles = string.Template("""
printlog "Copy Polygons"
cp -r $CreationDir0 $CreationDir
""")


# CHDB function allows almost embarassing parallelisation over several core per node requested"
chdbOverFile = string.Template("""
# $step #
printlog "$step"
$srun -n $ntasks chdb --in-dir $indir --out-dir $outdir --in-type $intype --command-line '$$SENSAGRICHAIN_HOME/bin/cpp/Executables/$prog $arg' --out-files %out-dir%/%dirname%/%basename%.out --report $report
""")

chdbExtraction = string.Template("""
# $step #
printlog "$step"
mkdir -p $createdir
$srun -n $ntasks chdb --in-dir $indir --out-dir $outdir --in-type $intype --command-line '$$SENSAGRICHAIN_HOME/bin/cpp/Executables/$prog $arg' --out-files %out-dir%/%dirname%/%basename%.out --report $report
""")


chdbOverDir = string.Template("""
# $step #
printlog "$step"
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/$prog $arg" --report $report
rm -r $indir.out
""")

chdbOverDirNormal = string.Template("""
# $step #
printlog "$step"
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "$prog $arg" --report $report
rm -r $indir.out
""")

chdbOverDirCmd = string.Template("""
# $step #
printlog "$step"
$srun -n $ntasks chdb --in-type dir --in-dir $indir --out-dir $outdir --command-line "$cmd" --report $report
""")

remove = string.Template("""
# $step #
printlog "$step"
$srun -n $ntasks chdb --in-type dir --in-dir $root/Optical --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/RemoveNul %in-dir%/%path%/CropTypeLabels_val.txt %in-dir%/../Radar/%path%/CropTypeLabels_val.txt"
rm -r $root/Optical.out

$srun -n $ntasks chdb --in-type dir --in-dir $root/Optical --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/RemoveNul %in-dir%/%path%/CropTypeLabels_learn.txt %in-dir%/../Radar/%path%/CropTypeLabels_learn.txt"
rm -r $root/Optical.out

$srun -n $ntasks chdb --in-type dir --in-dir $root/Radar --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/RemoveNul %in-dir%/%path%/CropTypeLabels_val.txt %in-dir%/../Optical/%path%/CropTypeLabels_val.txt"
rm -r $root/Radar.out

srun -n $ntasks chdb --in-type dir --in-dir $root/Radar --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/RemoveNul %in-dir%/%path%/CropTypeLabels_learn.txt %in-dir%/../Optical/%path%/CropTypeLabels_learn.txt"
rm -r $root/Radar.out
""")

CreateClassificationDir = """
# Classifications #
printlog "Classifications"
for i in {0..9}
do 
  mkdir -p AllTiles/Optical/Run_${i}.dir/Classifications/Confidence
  mkdir -p AllTiles/Optical/Run_${i}.dir/Classifications/ConfusionsMatrices
  mkdir -p AllTiles/Optical/Run_${i}.dir/Classifications/Models
  mkdir -p AllTiles/Optical/Run_${i}.dir/Classifications/PredictedLabels
  mkdir -p AllTiles/Optical/Run_${i}.dir/Classifications/Probabilities
  mkdir -p AllTiles/Optical/Run_${i}.dir/Classifications/VariablesImportances

  mkdir -p AllTiles/Radar/Run_${i}.dir/Classifications/Confidence
  mkdir -p AllTiles/Radar/Run_${i}.dir/Classifications/ConfusionsMatrices
  mkdir -p AllTiles/Radar/Run_${i}.dir/Classifications/Models
  mkdir -p AllTiles/Radar/Run_${i}.dir/Classifications/PredictedLabels
  mkdir -p AllTiles/Radar/Run_${i}.dir/Classifications/Probabilities
  mkdir -p AllTiles/Radar/Run_${i}.dir/Classifications/VariablesImportances

  mkdir -p AllTiles/Fusion/Run_${i}.dir/Classifications/ConfusionsMatrices
done
"""

chdbLoopDir = string.Template("""
# $step #
$loop
do
  printdebug "------- $step -------: Date $${i}"
  $srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/$prog $arg"
  rm -r $indir.out
done
""")

#chdbLoopClassif = string.Template("""
## Classification $step $case $method #
#printlog "Classification $step $case $method"
#$loop
#do
#  printdebug "------- $step: $case $method -------: Date $${i}"
#  srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/RFClassificationVI Profiles_learn${case}_$NbSamples${method}.txt CropTypeLabels_learn${case}_$NbSamples.txt Profiles_val${case}${method}.txt CropTypeLabels_val${case}.txt Classifications/Models/Model${case}${method}_Date$${i}.txt Classifications/PredictedLabels/PredictedLabels${case}${method}_Date$${i}.txt Classifications/ConfusionsMatrices/ConfusionsMatrix${case}${method}_Date$${i}.csv Classifications/VariablesImportances/VariablesImportances${case}${method}_Date$${i}.txt Classifications/Probabilities/Probabilities${case}${method}_Date$${i}.txt $NbChannels $${i}"
#  rm -r $indir.out 
#done
#""")

chdbLoopClassifOld = string.Template("""
# Classification $step $case $method #
printlog "Classification $step $case $method"
$loop
do
  printdebug "------- $step: $case $method -------: Date $${i}"
  $srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "otbApplicationLauncherCommandLine RFClassification $$SENSAGRICHAIN_HOME/bin/cpp/ProbabilityClassifier/build -trainprofiles Profiles_learn${case}_$NbSamples${method}.txt -valprofiles Profiles_val${case}${method}.txt -bands $NbChannels -dates $${i} -model Classifications/Models/Model${case}${method}_Date$${i}.txt -trainlabels CropTypeLabels_learn${case}_$NbSamples.txt -vallabels CropTypeLabels_val${case}.txt -predlabels Classifications/PredictedLabels/PredictedLabels${case}${method}_Date$${i}.txt -conf Classifications/Confidence/Confidence${case}${method}_Date$${i}.txt -prob Classifications/Probabilities/Probabilities${case}${method}_Date$${i}.txt -cmatrix Classifications/ConfusionsMatrices/ConfusionsMatrix${case}${method}_Date$${i}.csv -vi Classifications/VariablesImportances/VariablesImportances${case}${method}_Date$${i}.txt -nomen $nomen${case}.csv
"
  rm -r $indir.out 
done
""")

chdbClassif = string.Template("""
# Classification $step $case $method #
printlog "Classification $step $case $method"
printdebug "------- $step: $case $method -------: Dates: ${dateslist}"
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "otbApplicationLauncherCommandLine RFClassification $$SENSAGRICHAIN_HOME/bin/cpp/ProbabilityClassifier/build -trainprofiles Profiles_learn${case}_$NbSamples${method}.txt -valprofiles Profiles_val${case}${method}.txt -bands $NbChannels -dateslist ${dateslist} -model Classifications/Models/Model${case}${method} -trainlabels CropTypeLabels_learn${case}_$NbSamples.txt -vallabels CropTypeLabels_val${case}.txt -predlabels Classifications/PredictedLabels/PredictedLabels${case}${method} -conf Classifications/Confidence/Confidence${case}${method} -prob Classifications/Probabilities/Probabilities${case}${method} -cmatrix Classifications/ConfusionsMatrices/ConfusionsMatrix${case}${method} -vi Classifications/VariablesImportances/VariablesImportances${case}${method} -nomen $nomen${case}.csv
"
rm -r $indir.out
""")

chdbClassifMixModel = string.Template("""
# Classification Mix. Use previous train model and evaluate validation: $step $case $method #
printlog "Classification Mix. Use previous train model and evaluate validation: $step $case $method"
export pathusemodel=$usemodel
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "otbApplicationLauncherCommandLine RFClassification $$SENSAGRICHAIN_HOME/bin/cpp/ProbabilityClassifier/build -trainprofiles Profiles_learn${case}_$NbSamples${method}.txt -valprofiles Profiles_val${case}${method}.txt -bands $NbChannels -dateslist ${dateslist} -model Classifications/null -usemodel $$pathusemodel -trainlabels CropTypeLabels_learn${case}_$NbSamples.txt -vallabels CropTypeLabels_val${case}.txt -predlabels Classifications/PredictedLabels/PredictedLabels${case}${method}${modelid} -conf Classifications/Confidence/Confidence${case}${method}${modelid} -prob Classifications/Probabilities/Probabilities${case}${method}${modelid} -cmatrix Classifications/ConfusionsMatrices/ConfusionsMatrix${case}${method}${modelid} -vi Classifications/VariablesImportances/VariablesImportances${case}${method}${modelid} -nomen $nomen${case}.csv
"
rm -r $indir.out
""")

chdbClassifMixApply = string.Template("""
# Classification Mix. Apply previous train model to training set label: $step $case $method #
printlog "Classification Mix. Apply previous train model to training set label: $step $case $method"
export pathusemodel=$usemodel
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "otbApplicationLauncherCommandLine RFClassification $$SENSAGRICHAIN_HOME/bin/cpp/ProbabilityClassifier/build -trainprofiles Profiles_learn${case}_$NbSamples${method}.txt -valprofiles Profiles_learn${case}${method}.txt -bands $NbChannels -dateslist ${dateslist} -model Classifications/null -usemodel $$pathusemodel -trainlabels CropTypeLabels_learn${case}_$NbSamples.txt -vallabels CropTypeLabels_learn${case}.txt -predlabels CropTypeLabels${case}_pred${appid} -conf Classifications/Confidence/Confidence${case}${method}${appid} -prob Classifications/Probabilities/Probabilities${case}${method}${appid} -cmatrix Classifications/ConfusionsMatrices/ConfusionsMatrix${case}${method}${appid} -vi Classifications/VariablesImportances/VariablesImportances${case}${method}${appid} -nomen $nomen${case}.csv
"
rm -r $indir.out
""")

chdbClassifMixTrain = string.Template("""
# Classification Mix Construct coherent training set: $step $case $method #
printlog "Classification Mix Construct coherent training set: $step $case $method"
printdebug "------- $step: $case $method -------: Dates: ${dateslist}"
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "$$SENSAGRICHAIN_HOME/bin/scripts/SamplingSelection.py $$dirname/WorkFiles/Classes_CROP.txt ${previous}/CropTypeLabels_learn${case}_$NbSamples.txt CropTypeLabels_pred${appid}_$NbSamples.txt ${previous}/Profiles_learn${case}_$NbSamples${method}.txt Profiles_pred${appid}_$NbSamples.txt CropMix"
rm -r $indir.out
""")

chdbClassifMixCla = string.Template("""
# Classification Mix Final Classification: $step $case $method #
printlog "Classification Mix final Classification $step $case $method"
printdebug "------- $step: $case $method -------: Dates: ${dateslist}"
$srun -n $ntasks chdb --in-type dir --in-dir $indir --command-line "otbApplicationLauncherCommandLine RFClassification $$SENSAGRICHAIN_HOME/bin/cpp/ProbabilityClassifier/build -trainprofiles Profiles_pred${appid}_${NbSamples}_CropMix.txt -valprofiles Profiles_val${case}${method}.txt -bands $NbChannels -dateslist ${dateslist} -model Classifications/Models/Model${case}${method}${mixid} -trainlabels CropTypeLabels_pred${appid}_${NbSamples}_CropMix.txt -vallabels CropTypeLabels_val${case}.txt -predlabels Classifications/PredictedLabels/PredictedLabels${case}${method}${mixid} -conf Classifications/Confidence/Confidence${case}${method}${mixid} -prob Classifications/Probabilities/Probabilities${case}${method}${mixid} -cmatrix Classifications/ConfusionsMatrices/ConfusionsMatrix${case}${method}${mixid} -vi Classifications/VariablesImportances/VariablesImportances${case}${method}${mixid} -nomen $nomen${case}.csv
"
rm -r $indir.out
""")



chdbLoopStatistics = string.Template("""
# Statistics $method #
printlog "Statistics Optical $method, Radar and Fusion"
$loop
do IFS=","
  set -- $$i
  printdebug "-------$$method -------: Date $${1} $${2}"
  $srun -n $ntasks chdb --in-type dir --in-dir $root/AllTiles/Optical --command-line "CalculateStatistics ${root}/AllTiles/Radar/%path%/Classifications/Probabilities/Probabilities_Date$${1}.txt Classifications/Probabilities/Probabilities${method}_Date$${2}.txt CropTypeLabels_val.txt ${root}/WorkFiles/Classes.txt ${root}/AllTiles/Fusion/%path%/Classifications/ConfusionsMatrices/ConfusionsMatrix_Fusion${method}_Date$${2}.csv BinaryCropLabels_val.txt ${root}/WorkFiles/Binary.txt ${root}/AllTiles/Radar/%path%/Classifications/ConfusionsMatrices/ConfusionsMatrix_CM_Date$${1}.csv ${root}/AllTiles/Optical/%path%/Classifications/ConfusionsMatrices/ConfusionsMatrix_CM${method}_Date$${2}.csv ${root}/AllTiles/Fusion/%path%/Classifications/ConfusionsMatrices/ConfusionsMatrix_CM_Fusion${method}_Date$${2}.csv"
  rm -r $root/AllTiles/Optical.out

  printdebug "------- $$method CROP -------: Date $${1} $${2}"
  $srun -n $ntasks chdb --in-type dir --in-dir $root/AllTiles/Optical --command-line "CalculateStatistics ${root}/AllTiles/Radar/%path%/Classifications/Probabilities/Probabilities_CROP_Date$${1}.txt Classifications/Probabilities/Probabilities_CROP${method}_Date$${2}.txt CropTypeLabels_val_CROP.txt ${root}/WorkFiles/Classes_CROP.txt ${root}/AllTiles/Fusion/%path%/Classifications/ConfusionsMatrices/ConfusionsMatrix_CROP_Fusion${method}_Date$${2}.csv"
  rm -r $root/AllTiles/Optical.out

done
""")

CreateJoinDir = string.Template("""
# Join Radar and Optical #
printlog "Join Radar and Optical"
for i in {0..9}
do
  mkdir -p $path/AllTiles/RadarOptical/Run_$${i}.dir/Classifications/Models
  mkdir -p $path/AllTiles/RadarOptical/Run_$${i}.dir/Classifications/PredictedLabels
  mkdir -p $path/AllTiles/RadarOptical/Run_$${i}.dir/Classifications/ConfusionsMatrices
  mkdir -p $path/AllTiles/RadarOptical/Run_$${i}.dir/Classifications/VariablesImportances
  ln -s $path/AllTiles/Optical/Run_$${i}.dir/CropTypeLabels_learn_$NbSamples.txt $path/AllTiles/RadarOptical/Run_$${i}.dir/CropTypeLabels_learn_$NbSamples.txt
  ln -s $path/AllTiles/Optical/Run_$${i}.dir/BinaryCropLabels_learn_$NbSamples.txt $path/AllTiles/RadarOptical/Run_$${i}.dir/BinaryCropLabels_learn_$NbSamples.txt
  ln -s $path/AllTiles/Optical/Run_$${i}.dir/CropTypeLabels_val.txt $path/AllTiles/RadarOptical/Run_$${i}.dir/CropTypeLabels_val.txt
  ln -s $path/AllTiles/Optical/Run_$${i}.dir/BinaryCropLabels_val.txt $path/AllTiles/RadarOptical/Run_$${i}.dir/BinaryCropLabels_val.txt
  ln -s $path/AllTiles/Optical/Run_$${i}.dir/CropTypeLabels_learn_CROP_$NbSamples.txt $path/AllTiles/RadarOptical/Run_$${i}.dir/CropTypeLabels_learn_CROP_$NbSamples.txt
  ln -s $path/AllTiles/Optical/Run_$${i}.dir/CropTypeLabels_val_CROP.txt $path/AllTiles/RadarOptical/Run_$${i}.dir/CropTypeLabels_val_CROP.txt
done

printlog "Join S1 and S2 data - Learning set"
dates="$path/WorkFiles/S1S2_DatesOrder.txt"
infile="Profiles_learn_${NbSamples}.txt"
infileOpt="Profiles_learn_${NbSamples}${method}.txt"
$srun -n $ntasks chdb --in-type dir --in-dir $path/AllTiles/Radar --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/JoinOpticalAndRadar $$infile $path/AllTiles/Optical/%path%/$$infileOpt $path/AllTiles/RadarOptical/%path%/$$infileOpt $$dates $NbRad $NbOpt" --report Reports/JoinLearnReport.txt
rm -r $path/AllTiles/Radar.out

printlog "Join S1 and S2 data - Validation set"
infile="Profiles_val.txt"
infileOpt="Profiles_val${method}.txt"
$srun -n $ntasks chdb --in-type dir --in-dir $path/AllTiles/Radar --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/JoinOpticalAndRadar $$infile $path/AllTiles/Optical/%path%/$$infileOpt $path/AllTiles/RadarOptical/%path%/$$infileOpt $$dates $NbRad $NbOpt" --report Reports/JoinValreport.txt
rm -r $path/AllTiles/Radar.out

printlog "Join S1 and S2 data - Learning set CROP"
dates="$path/WorkFiles/S1S2_DatesOrder.txt"
infile="Profiles_learn_CROP_${NbSamples}.txt"
infileOpt="Profiles_learn_CROP_${NbSamples}${method}.txt"
$srun -n $ntasks chdb --in-type dir --in-dir $path/AllTiles/Radar --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/JoinOpticalAndRadar $$infile $path/AllTiles/Optical/%path%/$$infileOpt $path/AllTiles/RadarOptical/%path%/$$infileOpt $$dates $NbRad $NbOpt" --report Reports/JoinLearnReport.txt
rm -r $path/AllTiles/Radar.out

printlog "Join S1 and S2 data - Validation set CROP"
infile="Profiles_val_CROP.txt"
infileOpt="Profiles_val_CROP${method}.txt"
$srun -n $ntasks chdb --in-type dir --in-dir $path/AllTiles/Radar --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/JoinOpticalAndRadar $$infile $path/AllTiles/Optical/%path%/$$infileOpt $path/AllTiles/RadarOptical/%path%/$$infileOpt $$dates $NbRad $NbOpt" --report Reports/JoinValreport.txt
rm -r $path/AllTiles/Radar.out
""")

# CAUTION. The letter r in front of the following string is not a type. It indicates the strinw should be consider as a raw string #
chdbLoopClassifMulti = string.Template(r"""
# $step #
FS=$$'\n' read -d '' -r -a NbFeatures < ${path}/WorkFiles/S1S2_NbFeaturesPerDates.txt
$loop
do
  printdebug "------- $step -------: Date $${i}"
  $srun -n $ntasks chdb --in-type dir --in-dir $path/AllTiles/RadarOptical --command-line "$$SENSAGRICHAIN_HOME/bin/cpp/Executables/OptRadRFClassificationVI Profiles_learn${case}_$NbSamples$method.txt CropTypeLabels_learn${case}_$NbSamples.txt Profiles_val$case$method.txt CropTypeLabels_val$case.txt Classifications/Models/Model_${name}_Date_$${i}.txt Classifications/PredictedLabels/PredictedLabels_${name}_Date$${i}.txt Classifications/ConfusionsMatrices/ConfusionsMatrix_${name}_Date$${i}.csv Classifications/VariablesImportances/VariablesImportances_${name}_Date$${i}.txt $${NbFeatures[$$((i-1))]} $$i"
  rm -r $path/AllTiles/RadarOptical.out
done
""")

CreateMap = string.Template("""
# Map Creation ${case} ${step} ${method} ${tile} #
printlog "Map Creation ${step} ${method} ${tile}"
otbApplicationLauncherCommandLine RFClassification $$SENSAGRICHAIN_HOME/bin/cpp/CreateProbabilityMap/build -in $image -model $path/AllTiles/$step/Run_0.dir/Classifications/Models/Model${case}${method}_Date$date.txt -out $path/tmp/${tile}_${step}${case}${method}_map_${tag}.tif -confmap $path/tmp/${tile}_${step}${case}${method}_confidence_${tag}.tif -proba $path/tmp/${tile}_${step}${case}${method}_probabilities_${tag}.tif -dates $date -prim $PrimitivesType -nomen $nomen${case}.csv
""")

CreateFusionMap = string.Template("""
# Fusion Map Creation ${case} ${method} ${tile} #
printlog "Fusion Map Creation ${case} ${method} ${tile}"
$$SENSAGRICHAIN_HOME/bin/cpp/Executables/FusionMap $path/tmp/${tile}_${step1}${case}_probabilities_${tag1}.tif $path/tmp/${tile}_${step2}${case}${method}_probabilities_${tag2}.tif ${classdir}Classes${case}.txt $path/tmp/${tile}_Fusion${case}${method}_map_${tag1}_${tag2}.tif $path/tmp/${tile}_Fusion${case}${method}_confidence_${tag1}_${tag2}.tif
""")

RegularizeMap = string.Template("""
# Map Regularization ${case} ${method} ${tile} #
printlog "Map Regularizationi ${case} ${step} ${tile}"
otbcli_ClassificationMapRegularization -io.in $path/tmp/${tile}_${step}${case}${method}_map_${date}.tif -io.out $path/tmp/${tile}_${step}${case}${method}_map_${date}_REG.tif uint16 -ip.radius $radius
""")

CreateProducts = string.Template("""
# ${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2} #
printlog "${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2}"
${srunstart}$$SENSAGRICHAIN_HOME/bin/cpp/Executables/FusionProducts $path/tmp/${tile}_${step1}_probabilities_${tag1}.tif $path/tmp/${tile}_${step2}${method}_probabilities_${tag2}.tif ${classdir}Classes.txt ${classdir}Binary.txt $path/tmp/${tile}${method}_ProductsRaw_${tag1}_${tag2}.tif ${srunend}
""")

ApplyZeros = string.Template("""
# Apply zeros per tile product ${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2} #
printlog "Apply zero per tile product ${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2}"
${srunstart}otbcli_BandMathX -il $image $path/tmp/${tile}${method}_ProductsRaw_${tag1}_${tag2}.tif -out $path/Products/${tile}${method}_Products_${tag1}_${tag2}.tif -exp 'im1b1 == 0 || im1b10 == 0 ? 0*im2 : im2' ${srunend}
""")

CreateMosaic = string.Template("""
# Create Mosaic ${step} ${method} RadDate=${tag1} OptDate=${tag2} #
printlog "Create Mosaic ${step} ${method}"
${srunstart}gdalwarp -srcnodata 0 -dstnodata 0 $ProductsList $srunend
""")


CreateCropMask = string.Template("""
# ${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2} #
printlog "${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2}"
$$SENSAGRICHAIN_HOME/bin/cpp/Executables/FusionCropMask $path/tmp/${tile}_${step1}_probabilities_${date1}.tif $path/tmp/${tile}_${step2}${method}_probabilities_${date2}.tif ${classdir}Binary.txt $path/Products/CropMask/${tile}${method}_CropMask_${date1}_${date2}.tif $path/Products/CropMask/${tile}${method}_CropMask_Confidence_${date1}_${date2}.tif
""")

CreateCropType = string.Template("""
# ${step} ${method} ${tile} RadDate=${date1} OptDate=${date2} #
printlog "${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2}"
$$SENSAGRICHAIN_HOME/bin/cpp/Executables/FusionMap $path/tmp/${tile}_${step1}_CROP_probabilities_${date1}.tif $path/tmp/${tile}_${step2}_CROP${method}_probabilities_${date2}.tif ${classdir}Classes_CROP.txt $path/tmp/${tile}${method}_CropTypeNM_${date1}_${date2}.tif $path/tmp/${tile}${method}_CropType_ConfidenceNM_${date1}_${date2}.tif
""")

RegularizeProducts = string.Template("""
# ${step} ${method} ${tile} RadDate=${tag1} OptDate=${tag2}#
printlog "${step} ${tile}"
otbcli_ClassificationMapRegularization -io.in $path/Products/${tile}${case}${method}_${product}_${tag1}_${tag2}.tif -io.out $path/Products/${tile}${case}${method}_${product}_${tag1}_${tag2}_REG.tif uint16 -ip.radius $radius
""")

RegularizeProdMap = string.Template("""
# ${step} ${method} ${tile} RadDate=${date1} OptDate=${date2}#
printlog "${step} ${tile}"
otbcli_ClassificationMapRegularization -io.in $path/Products/${product}/${tile}${case}${method}_${product}_${date1}_${date2}.tif -io.out $path/Products/${product}/${tile}${case}${method}_${product}_${date1}_${date2}_REG.tif uint16 -ip.radius $radius
""")

ApplyCropMask = string.Template("""
# ${step} ${method} ${tile} RadDate=${date1} OptDate=${date2}#
printlog "${step} ${tile} ${reg}"
otbcli_BandMath -il $path/Products/CropMask/${tile}${method}_CropMask_${date1}_${date2}${reg}.tif $path/tmp/${tile}${method}_CropTypeNM_${date1}_${date2}${reg}.tif -out $path/Products/CropType/${tile}${method}_CropType_${date1}_${date2}${reg}.tif uint16 -exp 'im1b1*im2b1'
otbcli_BandMath -il $path/Products/CropMask/${tile}${method}_CropMask_${date1}_${date2}${reg}.tif $path/tmp/${tile}${method}_CropType_ConfidenceNM_${date1}_${date2}${reg}.tif -out $path/Products/CropType/${tile}${method}_CropType_confidence_${date1}_${date2}${reg}.tif uint16 -exp 'im1b1*im2b1'
""")


######################################################## MAIN #################################################################

if __name__ == "__main__":

    ### Initialise parser ###
    GeneratedCartouche = "#!/bin/bash\n" + cartouche()
    parser=argparse.ArgumentParser()
    parser.add_argument("config", nargs='?',default = None, help="Set the file CONFIG as the configuration file")
    parser.add_argument("-w", "--workdir", help="Create work directory WORKDIR. If specified, config is not compulsory")
    parser.add_argument("-r", "--results", help="Export statistical results according to configuration file")
    parser.add_argument("-u", "--update", help="Update job order according to files presents in the directory")
    parser.add_argument("-x", "--execute", help="Execute job with logfiles management")
    args=parser.parse_args()
 
    if args.workdir==None and args.config==None and args.results==None and args.update==None and args.execute==None:
        # Handle help message because mutual exclusive option required it.
        print "usage: sensagrichain [-h] [-w WORKDIR] [-r] config [-x] [-u] joborder.sh"
        print "sensagrichain: error: too few arguments"
        quit()

    if args.workdir!=None:
        CreateWorkDirectory(args.workdir)
        quit()

    if args.update!=None:
      UpdateJoborder(args.update)
      quit()

    if args.results!=None:
        Results.Export(args.results)
        quit()

    if args.execute!=None:
        ExecuteJob(args.execute)
        quit()

    config = ConfigParser.ConfigParser()
    namecfg = config.read(args.config)
 
    ### Parse paramters for joborder files ###
    
    # Get Input Parameters #
    name = json.loads(config.get('Parameters',"JobName"))
    workdir = json.loads(config.get('Parameters',"WorkingDirectory"))
    TilesList = json.loads(config.get('Parameters',"Tiles"))
    RadarImg = json.loads(config.get('Parameters',"RadarImages"))
    OpticalImg = json.loads(config.get('Parameters',"OpticalImages"))
    S1DatesFile = json.loads(config.get('Parameters',"RadarDates"))
    S2DatesFile = json.loads(config.get('Parameters',"OpticalDates"))
    ProdRadDatesList = json.loads(config.get('Parameters',"ProdRadarDates"))
    ProdOptDatesList = json.loads(config.get('Parameters',"ProdOpticalDates"))  
    ValDatesRad = json.loads(config.get('Parameters',"ValidationRadarDates"))
    ValDatesOpt = json.loads(config.get('Parameters',"ValidationOpticalDates"))
    Shapefiles = json.loads(config.get('Parameters',"Shapefiles"))
    NbRun = int(config.get('Parameters','NbRun'))
    NbSamples = int(config.get('Parameters','NbSamples'))
    radius = int(config.get('Parameters','RegularizationRadius'))
    lc = json.loads(config.get('Parameters',"LC"))
    code = json.loads(config.get('Parameters',"CODE"))
    crop = json.loads(config.get('Parameters',"CROP"))

    # Primitives mappings #
    stepname = {"OPT":"S2 Optical Band Only",
	        "OSO":"S2 + OSO Primitives",
		 "RE":"S2 + Red Edge Primitives",
  	      "OSORE":"S2 + OSO + Red Edge Primitives"}

    methodname = {"OPT":"",
	          "OSO":"_OSO",
		   "RE":"_RE",
		"OSORE":"_OSORE"}

    OpticalNbFeatures = {"OPT":10, "OSO":13, "RE":12, "OSORE":15}

    prim2code = {"OPT":-1,"OSO":0,"RE" :1,"OSORE":2}


    # Optional parameters in the joborder configuration file #
    try:
	reservedtime = json.loads(config.get('Parameters',"ReservedTime"))
    except:
	reservedtime = "00:00:00"

    try:
	memory = json.loads(config.get('Parameters',"MemoryPerJob"))
    except:
	memory = "180GB"

    try:
	    srunType = json.loads(config.get("Settings","ParallelType"))
    except:
	    srunType = 1

    try:
	    sruncom = json.loads(config.get("Settings","ParallelCom"))
    except:
	    sruncom = "mpirun" # or srun

    try:
	    sysoptions = json.loads(config.get("Settings","SystemOptions"))
    except:
	    sysoptions =  "### No options added ###"
     

    # Size Errors Manager
    if(len(TilesList) != len(RadarImg) or len(TilesList) != len(OpticalImg) or len(TilesList) != len(Shapefiles)):
        print "ERROR:"
        print """In the section [Parameters] of the configuration file, the lists "Tiles", "RadarImages", "OpticalImages" and "Shapefiles" must have the same size."""
        quit()

    if(len(ProdRadDatesList) != len(ProdOptDatesList)):
        print "ERROR:"
        print """In the section [Parameters] of the configuration file, the lists "ProdRadarDates" and "ProdOpticalDates" must have the same size."""
        quit()

    # Check if all shapefiles are the same
    sameshp = True
    for i in range(len(Shapefiles)-1):
      sameshp = sameshp and (Shapefiles[i]==Shapefiles[i+1])
 
    # Manage Statistics directory
    listvar = {'title':name,
               'nbrun':NbRun,
               'workdir':workdir,
               'S1_dates':S1DatesFile,
               'S1_val':ValDatesRad,
               'S1_prod':ProdRadDatesList,
               'S2_dates':S2DatesFile,
               'S2_val':ValDatesOpt,
               'S2_prod':ProdOptDatesList
               }

    ManageStatistics(workdir,listvar)
 
    RadarImages = {}
    OpticalImages = {}
    for i,tile in enumerate(TilesList):
        RadarImages[tile] = RadarImg[i]
        OpticalImages[tile] = OpticalImg[i]

   
    # Get Paths #
    
    #OpticalImagesList = json.loads(config.get('Paths',"OpticalImages"))
    #RadarImagesList = json.loads(config.get('Paths',"RadarImages"))
    #Shapefiles = json.loads(config.get('Paths',"Shapefiles"))
    
    TypeList = ["Optical","Radar","RadarOptical","Fusion"]
    OptionsList = ["Classification","Map","CropClassification","CropMap"]

    # General Options
    QOption = {}
    for ty in TypeList:
        QOption[ty] = {}
        for op in OptionsList:
            if(not(ty=="Fusion" and (op=="Classification" or op=="CropClassification" or op=="Map" or op=="CropMap"))):
                QOption[ty][op] = config.getboolean(ty,op)
 

    # Specific options
    extraOptions = [
                    ["Optical","Extraction"],
                    ["Optical","Sampling"],
                    ["Optical","Primitives"],
                    ["Radar","Extraction"],
                    ["Radar","Sampling"],
                    ["RadarOptical","Join"],
                    ["Fusion","CreateProducts"],
                    ["Fusion","Regularization"]]

    for val in extraOptions:
        ty = val[0]
        op = val[1]
        if op == "Primitives":
            QOption[ty][op] = json.loads(config.get(ty,op))
        else:
            QOption[ty][op] = config.getboolean(ty,op) 

    #QList=[QOptExt,QRadExt,QOptSam,QRadSam,QOSOInd,QREInd,QOptCla,QOptCroCla,QRadCla,
    #       QRadCroCla,QOSOCla,QOSOCroCla,QRECla,QRECroCla,QRadOptJoi,QRadOptCla,
    #       QRadOptCroCla,QOptMap,QRadMap,QRadOptMap,QOSOMap,QREMap,QOptReg,QRadReg,
    #       QRadOptReg,QOSOReg,QREReg,QFusion,QFusReg]
    
    Email = config.get('Settings',"EmailAddress")
    EmailType = config.get('Settings',"EmailType")
    # NONE, BEGIN, END, FAIL, REQUEUE, ALL
    
    # Temporaire
    
    DatesFilesDir = workdir + "/WorkFiles/"
    #ImagesDir = workdir + "/Images/"
    #ImageFolderList = os.listdir(workdir + "/" + TilesList[0] + "/" + ImagesDir)
   

    S1DatesTag = np.loadtxt(DatesFilesDir + S1DatesFile)
    S2DatesTag = np.loadtxt(DatesFilesDir + S2DatesFile)
    NbRadDates = len(S1DatesTag)
    NbOptDates = len(S2DatesTag) 
   
    # Error if product dates are bigger than the max date

    RadBool = False
    for d in ProdRadDatesList:
       RadBool = RadBool or (d>NbRadDates)
    if(RadBool):
        print "ERROR:"
        print """In the section [Parameters] of the configuration file, the date indices in the "ProdRadarDates" list must be smaller than or equal to the number of radar dates which is equal to %d."""%(NbRadDates)
        quit()

    OptBool = False
    for d in ProdOptDatesList:
       OptBool = OptBool or (d>NbOptDates)
    if(OptBool):
        print "ERROR:"
        print """In the section [Parameters] of the configuration file, the date indices in the "ProdOpticalDates" list must be smaller than or equal to the number of optical dates which is equal to %d."""%(NbOptDates)
        quit()
 
    print "Nb Date Rad = ", NbRadDates 
    print "Nb Date Opt = ", NbOptDates 
 

    NbRadFeatures = 2
    NbOptFeatures = OpticalNbFeatures[QOption["Optical"]["Primitives"]]
    if(QOption["RadarOptical"]["Join"]):
      gcdates.generate(DatesFilesDir,S1DatesFile,S2DatesFile, NbRadFeatures, NbOptFeatures)      
 
   
    NbTiles = len(TilesList)
    
    # temporary parameter
    NbRadCh = 2
    NbOptCh = 10
    #timeint,time = CalculateTime(SurfacesList,NbRadCh,NbOptCh,NbRadDates,NbOptDates,QList) 
    timeint  = 0
    
    #print "If queue manager is used, the reserved time = %s"%(reservedtime)
    
    headerDic = {
    'name':name,
    'nodes':1,
    'ntasks':NbRun+1,
    'ntaskspernode':NbRun+1,
    'mem':memory,
    'time':reservedtime,
    'email':Email,
    'mailtype':EmailType,
    'workdir':workdir,
    'sysoptions':sysoptions
    }


    shapefilepath = {}
    for i,tile in enumerate(TilesList):
        shapefilepath[tile] = {
        'shapefile':workdir + "/WorkFiles/Shapefiles/" + Shapefiles[i],
        'NbRun':NbRun, 
        'CreationDir0':workdir+"/WorkFiles/Shapefiles/SplitArea_%s/"%(TilesList[0]),
        'CreationDir':workdir+"/WorkFiles/Shapefiles/SplitArea_%s/"%(tile),
        'WorkFiles':workdir+"/WorkFiles/",
	'lc':lc,
	'code':code,
	'crop':crop
        }

    OptExt = {}
    RadExt = {}
    for tile in TilesList:
        OptExt[tile] = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'intype':"shp",
        'step':"Optical Samples Extraction "+tile,
        'prog':"ExtractSamplesNew",
        'indir': workdir+"/WorkFiles/Shapefiles/SplitArea_%s/"%(tile),
        'createdir': workdir+"/"+tile,
        'outdir': workdir+"/"+tile+"/"+"Optical",
        'arg':'%in-dir%/%path% ' + workdir+"/WorkFiles/Images/" + OpticalImages[tile]  + ' %out-dir%/%dirname%/',
        'report':"Reports/OptExtReport_%s.txt"%(tile)
        }
      

        RadExt[tile] = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'intype':"shp",
        'step':"Radar Samples Extraction "+tile,
        'prog':"ExtractSamplesNew",
        'indir': workdir+"/WorkFiles/Shapefiles/SplitArea_%s/"%(tile),
        'outdir': workdir+"/"+tile+"/"+"Radar",
        'arg':'%in-dir%/%path% ' + workdir+"/WorkFiles/Images/" + RadarImages[tile]  + ' %out-dir%/%dirname%/',
        'report':"Reports/RadExtReport_%s.txt"%(tile)
        }

        #RadRem[tile] = {
        #'ntasks':NbRun+1,
        #'step':"Radar Remove Null Sample "+tile,
        #'indir': workdir+"/"+tile+"/"+"Radar",
        #'path':'%in-dir%/%path%/',
        #}

    RadOptRem = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'step':"Radar and Optical Remove Null Sample Step",
        'root': workdir+"/AllTiles"
        }

    #indir=$T0/Radar                  
    #outdir=$dirname/AllTiles         
    #alltiles="%out-dir%/Radar/%name%"
    #cmd="mkdir -p $alltiles"
    if(QOption["Optical"]["Extraction"] or QOption["Radar"]["Extraction"]): 
        indirOpt = "%s/Optical"%(TilesList[0])
        indirRad = "%s/Radar"%(TilesList[1])
        outdirOpt = workdir + "/AllTiles/Optical"
        outdirRad = workdir + "/AllTiles/Radar"
        alltiles="%out-dir%/%name%"
        cmdOpt = "mkdir -p %s"%(alltiles)
        cmdRad = "mkdir -p %s"%(alltiles)
        FilesList =  ["BinaryCropLabels_learn.txt","Coordinates_learn.txt","CropTypeLabels_learn.txt","Profiles_learn.txt","BinaryCropLabels_val.txt","Coordinates_val.txt","CropTypeLabels_val.txt","Profiles_val.txt"]
        for f in FilesList:    
            cmdOpt = cmdOpt + ";cat "
            cmdRad = cmdRad + ";cat "
            for tile in TilesList:
                cmdOpt = cmdOpt + "%s/%s/Optical/%%name%%/%s "%(workdir,tile,f)
                cmdRad = cmdRad + "%s/%s/Radar/%%name%%/%s "%(workdir,tile,f)
            cmdOpt = cmdOpt + "> %s/%s"%(alltiles,f)
            cmdRad = cmdRad + "> %s/%s"%(alltiles,f)
        
        OptCon = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'step':"Optical Tiles Concatenation",
        'indir': indirOpt,
        'outdir': outdirOpt,
        'cmd': cmdOpt,
        'report':"Reports/OptConcReport.txt"
        }
        
        RadCon = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'step':"Radar Tiles Concatenation",
        'indir': indirRad,
        'outdir': outdirRad,
        'cmd': cmdRad,
        'report':"Reports/RadConcReport.txt"
        }
        
    OptCroLearn = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Optical",
    'step':"Optical Crop Filter Learning Set",
    'prog':"CropFilter",
    'arg': "Profiles_learn.txt Coordinates_learn.txt CropTypeLabels_learn.txt BinaryCropLabels_learn.txt Profiles_learn_CROP.txt Coordinates_learn_CROP.txt CropTypeLabels_learn_CROP.txt",
    'report':"Reports/OptCropLearnReport.txt"
    }
    
    OptCroVal = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Optical",
    'step':"Optical Crop Filter Validation Set",
    'prog':"CropFilter",
    'arg': "Profiles_val.txt Coordinates_val.txt CropTypeLabels_val.txt BinaryCropLabels_val.txt Profiles_val_CROP.txt Coordinates_val_CROP.txt CropTypeLabels_val_CROP.txt",
    'report':"Reports/OptCropValReport.txt"
    }
    
    RadCroLearn = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Radar",
    'step':"Radar Crop Filter Learning Set",
    'prog':"CropFilter",
    'arg': "Profiles_learn.txt Coordinates_learn.txt CropTypeLabels_learn.txt BinaryCropLabels_learn.txt Profiles_learn_CROP.txt Coordinates_learn_CROP.txt CropTypeLabels_learn_CROP.txt",
    'report':"Reports/RadCropLearnReport.txt"
    }
    
    RadCroVal = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Radar",
    'step':"Radar Crop Filter Validation Set",
    'prog':"CropFilter",
    'arg': "Profiles_val.txt Coordinates_val.txt CropTypeLabels_val.txt BinaryCropLabels_val.txt Profiles_val_CROP.txt Coordinates_val_CROP.txt CropTypeLabels_val_CROP.txt",
    'report':"Reports/RadCropValReport.txt"
    }
    
    OptSam = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Optical",
    'step':"Optical Random Sampling ",
    'prog':"Sampling",
    'arg': str(NbSamples) + " CropTypeLabels_learn.txt Profiles_learn.txt BinaryCropLabels_learn.txt Coordinates_learn.txt",
    'report':"Reports/OptSamReport.txt"
    }
    
    OptCroSam = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Optical",
    'step':"Optical CROP Random Sampling ",
    'prog':"Sampling",
    'arg': str(NbSamples) + " CropTypeLabels_learn_CROP.txt Profiles_learn_CROP.txt Coordinates_learn_CROP.txt",
    'report':"Reports/OptCroSamReport.txt"
    }
    
    RadSam = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Radar",
    'step':"Radar Random Sampling ",
    'prog':"Sampling",
    'arg': str(NbSamples) + " CropTypeLabels_learn.txt Profiles_learn.txt BinaryCropLabels_learn.txt Coordinates_learn.txt",
    'report':"Reports/RadSamReport.txt"
    }
    
    RadCroSam = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'indir': workdir+"/AllTiles/Radar",
    'step':"Radar CROP Random Sampling ",
    'prog':"Sampling",
    'arg': str(NbSamples) + " CropTypeLabels_learn_CROP.txt Profiles_learn_CROP.txt Coordinates_learn_CROP.txt",
    'report':"Reports/RadCroSamReport.txt"
    }
    
    ### Indices Managements #####################################
    
    prim = QOption["Optical"]["Primitives"]
    primCode = prim2code[prim]
    if(prim != "OPT"):
        IndLearn = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'indir': workdir+"/AllTiles/Optical",
        'step':"Creation %s Primitives Learning Set "%(prim),
        'prog':"CreateOpticalPrimitives",
        'arg':"Profiles_learn_%s.txt Profiles_learn_%s_%s.txt %d %d"%(NbSamples,NbSamples,prim,NbOptDates,primCode),
        'report':"Reports/IndLearnReport.txt"
        }
           
        IndVal = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'indir': workdir+"/AllTiles/Optical",
        'step':"Creation %s Primitives Validation Set "%(prim),
        'prog':"CreateOpticalPrimitives",
        'arg':"Profiles_val.txt Profiles_val_%s.txt %d %d"%(prim,NbOptDates,primCode),
        'report':"Reports/IndValReport.txt"
        }
    

        CroIndLearn = IndLearn.copy()
        CroIndVal   = IndVal.copy()
        CroIndLearn['arg'] = "Profiles_learn_CROP_%s.txt Profiles_learn_CROP_%s_%s.txt %d %d"%(NbSamples,NbSamples,prim,NbOptDates,primCode)
        CroIndVal['arg']   =  "Profiles_val_CROP.txt Profiles_val_CROP_%s.txt %d %d"%(prim,NbOptDates,primCode)
        CroIndLearn['step'] = CroIndLearn['step'] + "CROP"
        CroIndVal['step']   = CroIndVal['step'] + "CROP"

    ### Classifications ########################################

    loopRad = ""
    for dr in ValDatesRad:
      loopRad = loopRad + " %s"%(dr)
 
    loopOpt = ""
    for do in ValDatesOpt:
      loopOpt = loopOpt + " %s"%(do)
 
    loopRadOptFus = "for i in"
    for (dr,do) in zip(ValDatesRad,ValDatesOpt):
      loopRadOptFus = loopRadOptFus + " %s,%s"%(dr,do)

    loopRadOpt = "for i in"
    for (dr,do) in zip(ProdRadDatesList,ProdOptDatesList):
      loopRadOpt = loopRadOpt + " %i"%(int(dr)+int(do))

  
    #TODO: Automitize Optical and radar step number value
    OpticalStep = 5
    RadarStep = 10

    OptCla = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'NbSamples':NbSamples,
    'indir':"AllTiles/Optical",
    'step':stepname[prim],
    'case':"",
    'method':methodname[prim],
    'dateslist':loopOpt,
    'NbChannels':OpticalNbFeatures[prim],
    'nomen':workdir + "/WorkFiles/Classes",
    }
   
    RadCla = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'NbSamples':NbSamples,
    'indir':"AllTiles/Radar",
    'step':"Radar",
    'case':"",
    'method':"",
    'dateslist':loopRad,
    'NbChannels':2,
    'nomen':workdir + "/WorkFiles/Classes",
    }
    
 
    JoinDic = {
    'srun':sruncom,  
    'ntasks':(NbRun/2)+1,
    'NbSamples':NbSamples,
    'path': workdir,
    'step':stepname[prim],
    'NbRad':NbRadFeatures,
    'NbOpt':NbOptFeatures,
    'case':"",
    'method': methodname[prim],
    'nomen':workdir + "/WorkFiles/Classes",
    }

    ClaRadOpt = {
    'srun':sruncom,  
    'step':"Radar + Optical Classification",
    'ntasks':(NbRun/2)+1,
    'NbSamples':NbSamples,
    'path': workdir,
    'case':"", 
    'method':methodname[prim], 
    'name':prim, 
    'loop':loopRadOpt
    }

    CropClaRadOpt = {
    'srun':sruncom,  
    'step':"Radar + Optical Classification - CROP",
    'ntasks':(NbRun/2)+1,
    'path': workdir+"/AllTiles",
    'NbSamples':NbSamples,
    'path': workdir,
    'case':"_CROP", 
    'method':methodname[prim], 
    'name':prim, 
    'loop':loopRadOpt
    }
   
    StatDic = {
    'srun':sruncom,  
    'ntasks':NbRun+1,
    'method':methodname[prim], 
    'root': workdir,
    'loop':loopRadOptFus
    }
 
    ###### MAPS ################

    if srunType == 0:
	    # Pure sequencial execution
	    srunstart= ""
	    srunend = ""
    if srunType == 1:
	    # Parallele execution by the os
	    srunstart= ""
            srunend = "&"
    if srunType == 2:
	    # Complete parallele execution with srun
	    srunstart= "srun --hint=nomultithread -N1 -n1 -c1 --exclusive "
            srunend = "&"

    OptMap = {}
    RadMap = {}
    FusMap = {}
    FusPro = {}
    CMPro = {}
    CTPro = {}
    ProReg = {}
    AppCM = {}
    for tile in TilesList:
        #Note: PrimitivesType = (primCode+1) because primitive code is different between the indces creation code and the map code.
        # Can be change latter
        OptMap[tile] = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'step':stepname[prim],
        'case':"",
        'method':"",
        'path': workdir,
        'tile':tile,
        'date':NbOptDates,
        'PrimitivesType':primCode+1,
        'image':workdir + "/WorkFiles/Images/" + OpticalImages[tile],
        'nomen':workdir + "/WorkFiles/Classes",
        }
    
        RadMap[tile] = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'step':"Radar",
        'case':"",
        'method':"",        
        'path': workdir,
        'tile':tile,
        'date':NbRadDates,
        'PrimitivesType':4,
        'image':workdir + "/WorkFiles/Images/" + RadarImages[tile],
        'nomen':workdir + "/WorkFiles/Classes",
        }
   
        FusMap[tile] = {
        'srun':sruncom,  
        'ntasks':NbRun+1,
        'step1':"Radar",
        'step2':"Optical",
        'case':"",
	'method':methodname[prim], 
        'path': workdir,
        'tile':tile,
        'date1':0,
        'date2':0,
        'classdir':workdir+"/WorkFiles/"
        }

        FusPro[tile] = {
        'srunstart':srunstart, 
        'srunend':srunend, 
        'ntasks':NbRun+1,
        'step':"Create Fusion Products",
        'step1':"Radar",
        'step2':"Optical",
        'method':methodname[prim], 
        'image':workdir + "/WorkFiles/Images/" + OpticalImages[tile],
        'path': workdir,
        'tile':tile,
        'date1':0,
        'date2':0,
        'tag1':0,
        'tag2':0,
        'classdir':workdir+"/WorkFiles/"
        }
 
        CMPro[tile] = {
        'ntasks':NbRun+1,
        'step':"Create Crop Mask",
        'step1':"Radar",
        'step2':"Optical",
	'method':methodname[prim], 
        'path': workdir,
        'tile':tile,
        'date1':0,
        'date2':0,
        'classdir':workdir+"/WorkFiles/"
        }
        
        CTPro[tile] = {
        'ntasks':NbRun+1,
        'step':"Create Crop Type",
        'step1':"Radar",
        'step2':"Optical",
	'method':methodname[prim], 
        'path': workdir,
        'tile':tile,
        'date1':0,
        'date2':0,
        'classdir':workdir+"/WorkFiles/"
        }

        ProReg[tile] = {
        'ntasks':NbRun+1,
        'step':"Regularization",
	'method':methodname[prim], 
        'path': workdir,
        'tile':tile,
        'product':"CropMask",
        'case':"", 
        'tag1':0,
        'tag2':0,
        'radius':radius
        }
    
        AppCM[tile] = {
        'ntasks':NbRun+1,
        'step':"Apply Crop Mask",
	'method':methodname[prim], 
        'path': workdir,
        'tile':tile,
        'date1':0,
        'date2':0,
        'classdir':workdir+"/WorkFiles/",
        'reg':""
        }

    MosPro = {
    'srunstart':srunstart, 
    'srunend':srunend, 
    'ntasks':NbRun+1,
    'step':"Create Mosaic Products",
    'method':methodname[prim], 
    'path': workdir,
    'ProductList':"",
    'date1':0,
    'date2':0,
    'tag1':0,
    'tag2':0,
    'classdir':workdir+"/WorkFiles/"
    }
    
##########################################################################################################################
#                                            Automatic writting of the job script file                                   #
##########################################################################################################################


    tiledic = {'workdir':workdir}
    scriptfile = open(name+".sh","w") 
    scriptfile.write(GeneratedCartouche)
    scriptfile.write(header.substitute(headerDic))
    if(QOption["Optical"]["Extraction"] or QOption["Radar"]["Extraction"]):
      
        for tile in TilesList:
            if sameshp and tile != TilesList[0]:
                scriptfile.write(copyshapefiles.substitute(shapefilepath[tile]))
            else:
                scriptfile.write(createshapefiles.substitute(shapefilepath[tile]))
             

            tiledic['tile'] = tile
            scriptfile.write(chdbExtraction.substitute(OptExt[tile]))
        scriptfile.write(chdbOverDirCmd.substitute(OptCon))
    
    if(QOption["Radar"]["Extraction"]):
        for tile in TilesList:
            scriptfile.write(chdbOverFile.substitute(RadExt[tile]))
        scriptfile.write(chdbOverDirCmd.substitute(RadCon))

    if(QOption["Optical"]["Sampling"] and QOption["Radar"]["Sampling"]):
       scriptfile.write(remove.substitute(RadOptRem))
 
 
    if(QOption["Optical"]["Sampling"]):
        scriptfile.write(chdbOverDir.substitute(OptCroLearn))
        scriptfile.write(chdbOverDir.substitute(OptCroVal))
        scriptfile.write(chdbOverDir.substitute(OptSam))
        scriptfile.write(chdbOverDir.substitute(OptCroSam))
        
    if(QOption["Radar"]["Sampling"]): 
        scriptfile.write(chdbOverDir.substitute(RadCroLearn))
        scriptfile.write(chdbOverDir.substitute(RadCroVal))
        scriptfile.write(chdbOverDir.substitute(RadSam))
        scriptfile.write(chdbOverDir.substitute(RadCroSam))
 
    if(QOption["Optical"]["Primitives"]):
        scriptfile.write(chdbOverDir.substitute(IndLearn))
        scriptfile.write(chdbOverDir.substitute(IndVal))
        scriptfile.write(chdbOverDir.substitute(CroIndLearn))
        scriptfile.write(chdbOverDir.substitute(CroIndVal))
 

    # Create Classification directoires #
    scriptfile.write(CreateClassificationDir)

    # Optical Classification #
    if(QOption["Optical"]["Classification"]):
        scriptfile.write(chdbClassif.substitute(OptCla))
    if(QOption["Optical"]["CropClassification"]):
        OptCla['case'] = "_CROP"
        scriptfile.write(chdbClassif.substitute(OptCla))
    
    # Radar Classification #
    if(QOption["Radar"]["Classification"]):
        scriptfile.write(chdbClassif.substitute(RadCla))
    if(QOption["Radar"]["CropClassification"]):
        RadCla['case'] = "_CROP"
        scriptfile.write(chdbClassif.substitute(RadCla))
    
    # Calculation Fusion Classification measures #
    if(QOption["Optical"]["Classification"] and QOption["Radar"]["Classification"]):
       scriptfile.write(chdbLoopStatistics.substitute(StatDic))
 
    # Joined Optical and Radar classification # 
    if(QOption["RadarOptical"]["Join"]): scriptfile.write(CreateJoinDir.substitute(JoinDic))
    if(QOption["RadarOptical"]["Classification"]): scriptfile.write(chdbLoopClassifMulti.substitute(ClaRadOpt))
    if(QOption["RadarOptical"]["CropClassification"]): scriptfile.write(chdbLoopClassifMulti.substitute(CropClaRadOpt))

    # Classification mix. #
    #TODO: HARD CODDED VERSION SO FAR #
    if(False):
	try:
	    # Validation with other model
	    OptCla["modelid"]   = "_" + json.loads(config.get("Mix","ModelId"))
	    usemodelpath = json.loads(config.get("Mix","ModelTemplate"))
	    OptCla["usemodel"] = usemodelpath

            scriptfile.write(chdbClassifMixModel.substitute(OptCla))
                 
            # Calculation of Indices for the whole training set
            IndLearn['arg'] = "Profiles_learn.txt Profiles_learn_%s.txt %d %d"%(prim,NbOptDates,code2prim)
            scriptfile.write(chdbOverDir.substitute(IndLearn))
        
            # Apply other model to whole training set
            OptCla['dateslist'] = ValDatesOpt[-1] # Just the last date
	    OptCla["appid"]    = "_" + json.loads(config.get("Mix","ApplyId"))
            scriptfile.write(chdbClassifMixApply.substitute(OptCla))

            # Sample the new artificial dataset
            createlinks = {
            'ntasks':NbRun+1,
            'indir': workdir+"/AllTiles/Optical",
            'step':"Creation Symbolic links",
            'prog':"ln -s ",
            'arg':"",
	    'report':"Reports/CreateLinksReport.txt"
             }
	    a = OptCla["appid"]
            createlinks['arg'] = "CropTypeLabels_pred%s_Dates%d.txt CropTypeLabels_pred%s.txt\n"%(OptCla["appid"],ValDatesOpt[-1],a)
            scriptfile.write(chdbOverDirNormal.substitute(createlinks))
            createlinks['arg'] = "Profiles_learn%s.txt Profiles_pred%s.txt\n"%(OptCla["method"],a)
            scriptfile.write(chdbOverDirNormal.substitute(createlinks))
            createlinks['arg'] = "BinaryCropLabels_learn.txt BinaryCropLabels_pred%s.txt\n"%(a)
            scriptfile.write(chdbOverDirNormal.substitute(createlinks))
            createlinks['arg'] = "Coordinates_learn.txt Coordinates_pred%s.txt\n"%(a)
            scriptfile.write(chdbOverDirNormal.substitute(createlinks))
            s = " CropTypeLabels_pred%s.txt Profiles_pred%s.txt BinaryCropLabels_pred%s.txt Coordinates_pred%s.txt\n"%(a,a,a,a)
	    OptSam['arg'] = str(NbSamples) + s
            scriptfile.write(chdbOverDir.substitute(OptSam))


            # Construct coherent training set #
            OptCla['dateslist'] = loopOpt
            OptCla['mixid'] = "_clamix"
	    OptCla['previous'] = usemodelpath[:usemodelpath.find("%path%")+6]

            scriptfile.write(chdbClassifMixTrain.substitute(OptCla))
 
	    # Usual Classification with predicted training set
            OptCla['dateslist'] = loopOpt
            OptCla['mixid'] = "_CropMix"
            scriptfile.write(chdbClassifMixCla.substitute(OptCla))
 
        except:
	    #raise
	    pass




    # MAPS #
    for k in range(len(ProdRadDatesList)):
        date1 = ProdRadDatesList[k]    
        date2 = ProdOptDatesList[k]
        tag1 = int(S1DatesTag[date1-1])
	tag2 = int(S2DatesTag[date2-1])
        for tile in TilesList:
            RadMap[tile]['date'] = date1
            OptMap[tile]['date'] = date2
    	    RadMap[tile]['tag'] = tag1
            OptMap[tile]['tag'] = tag2
        if(QOption["Optical"]["Map"]):
            for tile in TilesList:
                OptMap[tile]['case'] = ""
                scriptfile.write(CreateMap.substitute(OptMap[tile]))
        if(QOption["Optical"]["CropMap"]):
            for tile in TilesList: 
                OptMap[tile]['case'] = "_CROP"
                scriptfile.write(CreateMap.substitute(OptMap[tile]))
        if(QOption["Radar"]["Map"]):
            for tile in TilesList:
                RadMap[tile]['case'] = ""
                scriptfile.write(CreateMap.substitute(RadMap[tile]))
        if(QOption["Radar"]["CropMap"]):
            for tile in TilesList: 
                RadMap[tile]['case'] = "_CROP"
                scriptfile.write(CreateMap.substitute(RadMap[tile]))
#    TODO:
#    Create fusion all class map. Desactivited so far.
#    for k in range(len(ProdRadDatesList)):
#        date1 = ProdRadDatesList[k]    
#        date2 = ProdOptDatesList[k] 
#        if(QOption["Fusion"]["Map"]):
#            for tile in TilesList:
#                FusMap[tile]['date1'] = date1
#                FusMap[tile]['date2'] = date2
#                scriptfile.write(CreateFusionMap.substitute(FusMap[tile]))
#        if(QOption["Fusion"]["CropMap"]):
#            for tile in TilesList:
#                FusMap[tile]['case']="_CROP"
#                FusMap[tile]['date1'] = date1
#                FusMap[tile]['date2'] = date2
#                scriptfile.write(CreateFusionMap.substitute(FusMap[tile]))

    # Getdate in readable form YYYMMDD

    for k in range(len(ProdRadDatesList)):
        date1 = ProdRadDatesList[k]    
        date2 = ProdOptDatesList[k]    
	tag1 = int(S1DatesTag[date1-1])
	tag2 = int(S2DatesTag[date2-1])

        #print "S1 idx:",date1,"S2 idx",date2
	#print "S1 tag:",tag1,"S2 tag:",tag2

        if(QOption["Fusion"]["CreateProducts"]):
            for tile in TilesList:
                FusPro[tile]['date1'] = date1
                FusPro[tile]['date2'] = date2
    	        FusPro[tile]['tag1'] = tag1
                FusPro[tile]['tag2'] = tag2
                scriptfile.write(CreateProducts.substitute(FusPro[tile]))
	    if(srunType == 1 or srunType == 2): scriptfile.write("wait\n")

        if(QOption["Fusion"]["CreateProducts"]):
            for tile in TilesList:
                FusPro[tile]['date1'] = date1
                FusPro[tile]['date2'] = date2
    	        FusPro[tile]['tag1'] = tag1
                FusPro[tile]['tag2'] = tag2
                scriptfile.write(ApplyZeros.substitute(FusPro[tile]))
	    if(srunType == 1 or srunType == 2): scriptfile.write("wait\n")
            MosPro["ProductsList"] = ""
            for tile in TilesList:
		    MosPro["ProductsList"] = MosPro["ProductsList"] + "%s/Products/%s%s_Products_%s_%s.tif "%(workdir,tile,FusPro[tile]["method"],tag1,tag2)
            MosPro["ProductsList"] = MosPro["ProductsList"] + "%s/Products/%s%s_Products_%s_%s.tif"%(workdir,name,FusPro[tile]["method"],tag1,tag2)


            scriptfile.write(CreateMosaic.substitute(MosPro))
    if(srunType == 1 or srunType == 2): scriptfile.write("wait\n")

    for k in range(len(ProdRadDatesList)):
        date1 = ProdRadDatesList[k]    
        date2 = ProdOptDatesList[k]    
	tag1 = int(S1DatesTag[date1-1])
	tag2 = int(S2DatesTag[date2-1])

        if(QOption["Fusion"]["Regularization"]):
            for tile in TilesList:
                ProReg[tile]['tag1'] = tag1
                ProReg[tile]['tag2'] = tag2
                ProReg[tile]['product'] = "Products"
                scriptfile.write(RegularizeProducts.substitute(ProReg[tile]))


    if(QOption["Fusion"]["CreateProducts"] or QOption["Fusion"]["Regularization"]):
        scriptfile.write("\n# Compress Products.\n") 
        scriptfile.write("tar zcvf Products.tar.gz Products/\n")

    
#        if(QOption["Fusion"]["CreateCropType"]):
#            for tile in TilesList:
#                CTPro[tile]['date1'] = date1
#                CTPro[tile]['date2'] = date2
#                AppCM[tile]["reg"] = ""
#                AppCM[tile]['date1'] = date1
#                AppCM[tile]['date2'] = date2
#                scriptfile.write(CreateCropType.substitute(CTPro[tile]))
#                scriptfile.write(ApplyCropMask.substitute(AppCM[tile]))
#
#        if(QOption["Fusion"]["CropMaskRegularization"]):
#            for tile in TilesList:
#                ProReg[tile]['date1'] = date1
#                ProReg[tile]['date2'] = date2
#                ProReg[tile]['product'] = "CropMask"
#                scriptfile.write(RegularizeProdMap.substitute(ProReg[tile]))
#
#        if(QOption["Fusion"]["CropTypeRegularization"]):
#            for tile in TilesList:
#                ProReg[tile]['date1'] = date1
#                ProReg[tile]['date2'] = date2
#                ProReg[tile]['product'] = "CropType"
#                AppCM[tile]["reg"] = "_REG"
#                scriptfile.write(RegularizeProdMap.substitute(ProReg[tile]))
#                  


    #TODO add othe case and method
    
    scriptfile.write("\n")
    scriptfile.write("""printlog "Job Completed" """)
    scriptfile.close() 
    cmd = "cat master.sh"
    #cmd = "sbatch master.sh"
    #p = subprocess.Popen([cmd], shell=True)
